#/bin/bash

trap 'echo -e "\033[0m"; exit' SIGINT

COLORS=1
TRIM=0
ERR50X=0
ERR404=0
ERR40X=0
HOST="`hostname`"
PREFIX=$HOST
INSTANCE=""
LOG_FORMAT="%h|%{%Y-%m-%d}t|%{%H:%M:%S}t|%{Host}i|%U|%q|%m|%s|%b|%{Varnish:time_firstbyte}x|%{Varnish:handling}x"
# $1  %h                          - remote host
# $2  %{%Y-%m-%d}t                - datetime of request 
# $3  %{%H:%M:%S}t                - time of request
# $4  %{Host}i                    - HTTP Host header
# $5  %U                          - URL (without query string)
# $6  %q                          - Query string
# $7  %m                          - HTTP request method
# $8  %s                          - Response HTTP response_status code
# $9  %b                          - Response size (bytes)
# $10 %{Varnish:time_firstbyte}x  - Backend response time
# $11 %{Varnish:handling}x        - Request handler ( hit / miss / pass / pipe / error )

while getopts "l:n:tecmjh" Option; do
  case $Option in
    l ) HOST=$OPTARG;;
    n ) INSTANCE=$OPTARG;;
    t ) TRIM=1;;
    e ) ERR50X=1;;
    c ) ERR40X=1;;
    m ) ERR404=1;;
    j ) COLORS=0;;
    h )
      echo "`basename $0` - pretty output of Varnish NCSA logs"
      echo ""
      echo "Usage: `basename $0` options (-lntecmj)"
      echo ""
      echo "Arguments"
      echo "   -l   host to monitor, via SSH (default is localhost)"
      echo "   -n   specify Varnish instance"
      echo "   -t   do not display all static files (cs, js, images, etc...)"
      echo "   -e   display only 50x errors"
      echo "   -c   display only 40x errors"
      echo "   -m   display only 404 errors"
      echo "   -j   do not use colors on output"
      echo "   -h   displays this help message"  
      echo ""
      exit 0
      ;;
    * ) echo "Unknown option "$Option;;
  esac
done
shift $(($OPTIND - 1))


# command options
if [ -z "$INSTANCE" ]; then
  CMD=(varnishncsa -F "$LOG_FORMAT")
else
  CMD=(varnishncsa -n $INSTANCE -F "$LOG_FORMAT")
fi

${CMD[@]} | awk -F'|' \
  -v trim="$TRIM" \
  -v err50x="$ERR50X" \
  -v err40x="$ERR40X" \
  -v err404="$ERR404" \
  -v colors="$COLORS" \
'BEGIN {
  request_ip = ""
  time_date = ""
  time_time = ""
  request_host = ""
  request_url = ""
  request_query = ""
  response_method = ""
  response_status = ""
  response_size = ""
  response_ttfb = ""
  response_result = "miss"
  msg_end = "\033[0m"
  msg_hit_200  = "\033[1;92m\033[1m" ; # green high
  msg_hit_404  = "\033[1;31m\033[1m" ; # red
  msg_hit      = "\033[1;32m\033[1m" ; # green
  msg_miss_200 = "\033[1;33m\033[1m" ; # yellow
  msg_miss_301 = "\033[1;36m\033[1m" ; # cyan
  msg_miss_302 = "\033[1;96m\033[1m" ; # cyan high
  msg_miss_304 = "\033[1;93m\033[1m" ; # yellow high
  msg_miss_401 = "\033[1;35m\033[1m" ; # purple
  msg_miss_403 = "\033[1;95m\033[1m" ; # purple high
  msg_miss_404 = "\033[1;91m\033[1m" ; # red high
  msg_miss_410 = "\033[1;34m\033[1m" ; # blue
  msg_miss_500 = "\033[1;41m\033[1m" ; # red background
  msg_miss     = "\033[1;91m\033[1m" ; # red high
}   

{ 
  request_ip = $1
  time_date = $2
  time_time = $3
  request_host = $4
  request_url = $5
  request_query = $6
  response_method = $7
  response_status = $8
  response_size = $9
  response_ttfb = $10
  response_result = $11


  if ( trim == "1" ) {
    if ( request_url ~ /\/files\// \
      || request_url ~ /\.sql/ \
      || request_url ~ /\.txt/ \
      || request_url ~ /\.mp4/ \
      || request_url ~ /\.webm/ \
      || request_url ~ /\.asf/ \
      || request_url ~ /\.asx/ \
      || request_url ~ /\.wax/ \
      || request_url ~ /\.wmv/ \
      || request_url ~ /\.wmx/ \
      || request_url ~ /\.bmp/ \
      || request_url ~ /\.bz2/ \
      || request_url ~ /\.class/ \
      || request_url ~ /\.css/ \
      || request_url ~ /\.divx/ \
      || request_url ~ /\.doc/ \
      || request_url ~ /\.docx/ \
      || request_url ~ /\.eot/ \
      || request_url ~ /\.exe/ \
      || request_url ~ /\.flv/ \
      || request_url ~ /\.gif/ \
      || request_url ~ /\.gzip/ \
      || request_url ~ /\.gz/ \
      || request_url ~ /\.htc/ \
      || request_url ~ /\.ico/ \
      || request_url ~ /\.jpeg/ \
      || request_url ~ /\.jpg/ \
      || request_url ~ /\.js/ \
      || request_url ~ /\.mdb/ \
      || request_url ~ /\.mid/ \
      || request_url ~ /\.midi/ \
      || request_url ~ /\.mov/ \
      || request_url ~ /\.qt/ \
      || request_url ~ /\.mp3/ \
      || request_url ~ /\.m4a/ \
      || request_url ~ /\.m4v/ \
      || request_url ~ /\.mov/ \
      || request_url ~ /\.mpeg/ \
      || request_url ~ /\.mpg/ \
      || request_url ~ /\.mpe/ \
      || request_url ~ /\.mpp/ \
      || request_url ~ /\.odb/ \
      || request_url ~ /\.odc/ \
      || request_url ~ /\.odf/ \
      || request_url ~ /\.odg/ \
      || request_url ~ /\.odp/ \
      || request_url ~ /\.ods/ \
      || request_url ~ /\.odt/ \
      || request_url ~ /\.ogg/ \
      || request_url ~ /\.ogv/ \
      || request_url ~ /\.otf/ \
      || request_url ~ /\.pdf/ \
      || request_url ~ /\.png/ \
      || request_url ~ /\.pot/ \
      || request_url ~ /\.pps/ \
      || request_url ~ /\.ppt/ \
      || request_url ~ /\.pptx/ \
      || request_url ~ /\.ra/ \
      || request_url ~ /\.ram/ \
      || request_url ~ /\.rar/ \
      || request_url ~ /\.svg/ \
      || request_url ~ /\.svgz/ \
      || request_url ~ /\.swf/ \
      || request_url ~ /\.tar/ \
      || request_url ~ /\.tbz/ \
      || request_url ~ /\.tgz/ \
      || request_url ~ /\.tif/ \
      || request_url ~ /\.tiff/ \
      || request_url ~ /\.ttf/ \
      || request_url ~ /\.wav/ \
      || request_url ~ /\.wma/ \
      || request_url ~ /\.woff/ \
      || request_url ~ /\.wri/ \
      || request_url ~ /\.xla/ \
      || request_url ~ /\.xls/ \
      || request_url ~ /\.xlsx/ \
      || request_url ~ /\.xlt/ \
      || request_url ~ /\.xlw/ \
      || request_url ~ /\.xml/ \
      || request_url ~ /\.zip/ ) {
      ok = "0"
    }
  }

  if ( colors == "1" && (response_result == "miss" || response_result == "error" || response_result == "pipe" || response_result == "pass" || response_result == "-")) {
    if (response_status == "200") {
      msg_bgn = msg_miss_200
    }
    else if (response_status == "301") {
      msg_bgn = msg_miss_301
    }
    else if (response_status == "302") {
      msg_bgn = msg_miss_302
    }
    else if (response_status == "304") {
      msg_bgn = msg_miss_304
    }
    else if (response_status == "401") {
      msg_bgn = msg_miss_401
    }
    else if (response_status == "403") {
      msg_bgn = msg_miss_403
    }
    else if (response_status == "404") {
      msg_bgn = msg_miss_404
    }
    else if (response_status == "410") {
      msg_bgn = msg_miss_410
    }
    else if (response_status ~ /^5/) {
      msg_bgn = msg_miss_500
    } else {
      msg_bgn = msg_miss
    }
  } else if ( colors == "1" ) {
    if (response_status == "200") {
      msg_bgn = msg_hit_200
    } else if (response_status == "404") {
      msg_bgn = msg_hit_404
    } else {
      msg_bgn = msg_hit
    }        
  }

  if ( err50x == "1" ) {
    if (response_status ~ /^5/) {
      ok = "1"
    } else {
      ok = "0"
    }
  }

  if ( err404 == "1" ) {
    if (response_status == "404") {
      ok = "1"
    } else {
      ok = "0"
    }
  }

  if ( err40x == "1" ) {
    if (response_status ~ /^4/) {
      ok = "1"
    } else {
      ok = "0"
    }
  }

  # Filtered output only  
  if (ok == "1") {
    printf("%s[%s %s] %s %s %s%s%s %s [ %s ]%s\n", msg_bgn, time_date, time_time, response_result, response_status, request_host, request_url, request_query, request_ip, response_ttfb, msg_end)
  }

  ok = "1"
  request_ip = ""
  time_date = ""
  time_time = ""
  request_host = ""
  request_url = ""
  request_query = ""
  response_method = ""
  response_status = ""
  response_size = ""
  response_ttfb = ""
  response_result = "miss"
}'
